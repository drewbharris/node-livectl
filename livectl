#!/usr/bin/env node

"use strict";

var fs = require('fs'),
    when = require('when'),
    sequence = require('sequence'),
    commander = require('commander'),
    midi = require('midi'),
    globalSockets = {};

commander
	.version('0.0.1')
	.option('start', 'start a livectl server')
	.option('connect [address]', 'connect to a livectl server')
	.option('list', 'list available midi devices')
	.parse(process.argv);

if (commander.start) {
	var app = require('express')(),
	    express = require('express'),
	    server = require('http').createServer(app),
	    io = require('socket.io').listen(server);
	    
	console.log('starting server');

	server.listen(8080);
}
else if (typeof commander.connect === 'string') {
    var app = require('express')(),
	    express = require('express'),
	    server = require('http').createServer(app),
	    io = require('socket.io-client'),
	    input = new midi.input(),
    	output = new midi.output(),
    	inputChoice,
    	outputChoice;

	sequence(this).then(function(next){
		listPorts(input, output).then(next);
	}).then(function(next){
		commander.prompt('enter a name for this computer: ', next);
	}).then(function(next, nicknameChoice){
		next();
	}).then(function(next){
		commander.prompt('input (enter for none): ', next);
	}).then(function(next, inputChoice){
		this.inputChoice = inputChoice;
		next();
	}).then(function(next){
		commander.prompt('output (enter for none): ', next);
	}).then(function(next, outputChoice){
		this.outputChoice = outputChoice;
		next();
	}).then(function(next){
		if (!this.inputChoice
			&& !this.outputChoice) {
			console.log('either an input or output is required');
			process.exit(0);
		}
		console.log('connecting to ' + commander.connect);

		var socket = io.connect(commander.connect);
		socket.on('midiEvent', function(data){
			console.log(data);
		});

		// process.exit(0);
	});

	
}
else if (commander.list) {
    listPorts(new midi.input(), new midi.output());
    process.exit(0);
}
else {
	commander.outputHelp();
}

function listPorts(input, output) {
	var d = when.defer(),
		numberOfInputs = input.getPortCount(),
    	numberOfOutputs = output.getPortCount();
	console.log('Inputs:');
    for (var i=0;i<numberOfInputs;i++) {
    	console.log(i + ': ' + input.getPortName(i));
    }
    console.log('Outputs:');
    for (var i=0;i<numberOfOutputs;i++) {
    	console.log(i + ': ' + output.getPortName(i));
    }
    d.resolve();
    return d.promise;
}

